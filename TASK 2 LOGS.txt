TASK 2 LOGS 

PS D:\downloads\PROJECTS\terraform> terraform init
Initializing the backend...
Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v6.2.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
PS D:\downloads\PROJECTS\terraform> terraform validate
Success! The configuration is valid.

PS D:\downloads\PROJECTS\terraform> terraform plan
data.aws_vpc.default: Reading...
data.aws_ami.ubuntu: Reading...
data.aws_ami.ubuntu: Read complete after 1s [id=ami-03b371d239dfe4af4]
data.aws_vpc.default: Read complete after 2s [id=vpc-008de4b465fe3117a]
aws_security_group.allow_tls: Refreshing state... [id=sg-0be48b79ebb72ff5c]
aws_vpc_security_group_egress_rule.allow_all_traffic_ipv6: Refreshing state... [id=sgr-0e59d1885a26e5882]
aws_vpc_security_group_ingress_rule.allow_tls_ipv6: Refreshing state... [id=sgr-02605ec3691be137f]
aws_vpc_security_group_ingress_rule.allow_ssh_ipv4: Refreshing state... [id=sgr-00e73afb3f96f4f1f]
aws_vpc_security_group_ingress_rule.allow_tls_ipv4: Refreshing state... [id=sgr-0f313244f7a715a54]
aws_vpc_security_group_egress_rule.allow_all_traffic_ipv4: Refreshing state... [id=sgr-034eabdb5bce05e60]
aws_instance.Sample_demo[0]: Refreshing state... [id=i-0049f30da5dd87eeb]

Note: Objects have changed outside of Terraform

Terraform detected the following changes made outside of Terraform since the last "terraform apply" which may have
affected this plan:

  # aws_security_group.allow_tls has been deleted
  - resource "aws_security_group" "allow_tls" {
      - id                     = "sg-0be48b79ebb72ff5c" -> null
        name                   = "allow_tls"
        tags                   = {
            "Name" = "allow_tls"
        }
        # (10 unchanged attributes hidden)
    }


Unless you have made equivalent changes to your configuration, or ignored the relevant attributes using ignore_changes,
the following plan may include actions to undo or respond to these changes.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform planned the following actions, but then encountered a problem:

  # aws_instance.Sample_demo[0] will be created
  + resource "aws_instance" "Sample_demo" {
      + ami                                  = "ami-03b371d239dfe4af4"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "abc"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + region                               = "eu-north-1"
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "EC2_Without_AMI"
        }
      + tags_all                             = {
          + "Name" = "EC2_Without_AMI"
        }
      + tenancy                              = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # aws_security_group.allow_tls will be created
  + resource "aws_security_group" "allow_tls" {
      + arn                    = (known after apply)
      + description            = "Allow TLS inbound traffic and all outbound traffic"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "allow_tls"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "eu-north-1"
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow_tls"
        }
      + tags_all               = {
          + "Name" = "allow_tls"
        }
      + vpc_id                 = "vpc-008de4b465fe3117a"
    }

Plan: 2 to add, 0 to change, 0 to destroy.
╷
│ Warning: AWS resource not found during refresh
│
│   with aws_vpc_security_group_ingress_rule.allow_tls_ipv4,
│   on main.tf line 49, in resource "aws_vpc_security_group_ingress_rule" "allow_tls_ipv4":
│   49: resource "aws_vpc_security_group_ingress_rule" "allow_tls_ipv4" {
│
│ Automatically removing from Terraform State instead of returning the error, which may trigger resource recreation.
│ Original error: couldn't find resource
│
│ (and 4 more similar warnings elsewhere)
╵
╷
│ Error: Provider produced invalid plan
│
│ Provider "registry.terraform.io/hashicorp/aws" has indicated "requires replacement" on
│ aws_vpc_security_group_ingress_rule.allow_tls_ipv6 for a non-existent attribute path
│ cty.Path{cty.GetAttrStep{Name:""}}.
│
│ This is a bug in the provider, which should be reported in the provider's own issue tracker.
╵
╷
│ Error: Provider produced invalid plan
│
│ Provider "registry.terraform.io/hashicorp/aws" has indicated "requires replacement" on
│ aws_vpc_security_group_ingress_rule.allow_tls_ipv4 for a non-existent attribute path
│ cty.Path{cty.GetAttrStep{Name:""}}.
│
│ This is a bug in the provider, which should be reported in the provider's own issue tracker.
╵
╷
│ Error: Provider produced invalid plan
│
│ Provider "registry.terraform.io/hashicorp/aws" has indicated "requires replacement" on
│ aws_vpc_security_group_ingress_rule.allow_ssh_ipv4 for a non-existent attribute path
│ cty.Path{cty.GetAttrStep{Name:""}}.
│
│ This is a bug in the provider, which should be reported in the provider's own issue tracker.
╵
╷
│ Error: Provider produced invalid plan
│
│ Provider "registry.terraform.io/hashicorp/aws" has indicated "requires replacement" on
│ aws_vpc_security_group_egress_rule.allow_all_traffic_ipv4 for a non-existent attribute path
│ cty.Path{cty.GetAttrStep{Name:""}}.
│
│ This is a bug in the provider, which should be reported in the provider's own issue tracker.
╵
╷
│ Error: Provider produced invalid plan
│
│ Provider "registry.terraform.io/hashicorp/aws" has indicated "requires replacement" on
│ aws_vpc_security_group_egress_rule.allow_all_traffic_ipv6 for a non-existent attribute path
│ cty.Path{cty.GetAttrStep{Name:""}}.
│
│ This is a bug in the provider, which should be reported in the provider's own issue tracker.
╵
PS D:\downloads\PROJECTS\terraform> terraform init
Initializing the backend...
Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v6.2.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
PS D:\downloads\PROJECTS\terraform> terraform validate
Success! The configuration is valid.

PS D:\downloads\PROJECTS\terraform> terraform plan
data.aws_vpc.default: Reading...
data.aws_ami.ubuntu: Reading...
data.aws_ami.ubuntu: Read complete after 1s [id=ami-03b371d239dfe4af4]
data.aws_vpc.default: Read complete after 2s [id=vpc-008de4b465fe3117a]
aws_security_group.allow_tls: Refreshing state... [id=sg-0be48b79ebb72ff5c]
aws_vpc_security_group_ingress_rule.allow_tls_ipv4: Refreshing state... [id=sgr-0f313244f7a715a54]
aws_vpc_security_group_egress_rule.allow_all_traffic_ipv4: Refreshing state... [id=sgr-034eabdb5bce05e60]
aws_vpc_security_group_egress_rule.allow_all_traffic_ipv6: Refreshing state... [id=sgr-0e59d1885a26e5882]
aws_vpc_security_group_ingress_rule.allow_ssh_ipv4: Refreshing state... [id=sgr-00e73afb3f96f4f1f]
aws_vpc_security_group_ingress_rule.allow_tls_ipv6: Refreshing state... [id=sgr-02605ec3691be137f]
aws_instance.Sample_demo[0]: Refreshing state... [id=i-0049f30da5dd87eeb]

Note: Objects have changed outside of Terraform

Terraform detected the following changes made outside of Terraform since the last "terraform apply" which may have
affected this plan:

  # aws_security_group.allow_tls has been deleted
  - resource "aws_security_group" "allow_tls" {
      - id                     = "sg-0be48b79ebb72ff5c" -> null
        name                   = "allow_tls"
        tags                   = {
            "Name" = "allow_tls"
        }
        # (10 unchanged attributes hidden)
    }


Unless you have made equivalent changes to your configuration, or ignored the relevant attributes using ignore_changes,
the following plan may include actions to undo or respond to these changes.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform planned the following actions, but then encountered a problem:

  # aws_instance.Sample_demo[0] will be created
  + resource "aws_instance" "Sample_demo" {
      + ami                                  = "ami-03b371d239dfe4af4"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "abc"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + region                               = "eu-north-1"
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "EC2_Without_AMI"
        }
      + tags_all                             = {
          + "Name" = "EC2_Without_AMI"
        }
      + tenancy                              = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # aws_security_group.allow_tls will be created
  + resource "aws_security_group" "allow_tls" {
      + arn                    = (known after apply)
      + description            = "Allow TLS inbound traffic and all outbound traffic"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "allow_tls"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "eu-north-1"
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow_tls"
        }
      + tags_all               = {
          + "Name" = "allow_tls"
        }
      + vpc_id                 = "vpc-008de4b465fe3117a"
    }

Plan: 2 to add, 0 to change, 0 to destroy.
╷
│ Warning: AWS resource not found during refresh
│
│   with aws_vpc_security_group_ingress_rule.allow_tls_ipv4,
│   on main.tf line 37, in resource "aws_vpc_security_group_ingress_rule" "allow_tls_ipv4":
│   37: resource "aws_vpc_security_group_ingress_rule" "allow_tls_ipv4" {
│
│ Automatically removing from Terraform State instead of returning the error, which may trigger resource recreation.
│ Original error: couldn't find resource
│
│ (and 4 more similar warnings elsewhere)
╵
╷
│ Error: Provider produced invalid plan
│
│ Provider "registry.terraform.io/hashicorp/aws" has indicated "requires replacement" on
│ aws_vpc_security_group_ingress_rule.allow_ssh_ipv4 for a non-existent attribute path
│ cty.Path{cty.GetAttrStep{Name:""}}.
│
│ This is a bug in the provider, which should be reported in the provider's own issue tracker.
╵
╷
│ Error: Provider produced invalid plan
│
│ Provider "registry.terraform.io/hashicorp/aws" has indicated "requires replacement" on
│ aws_vpc_security_group_egress_rule.allow_all_traffic_ipv4 for a non-existent attribute path
│ cty.Path{cty.GetAttrStep{Name:""}}.
│
│ This is a bug in the provider, which should be reported in the provider's own issue tracker.
╵
╷
│ Error: Provider produced invalid plan
│
│ Provider "registry.terraform.io/hashicorp/aws" has indicated "requires replacement" on
│ aws_vpc_security_group_egress_rule.allow_all_traffic_ipv6 for a non-existent attribute path
│ cty.Path{cty.GetAttrStep{Name:""}}.
│
│ This is a bug in the provider, which should be reported in the provider's own issue tracker.
╵
╷
│ Error: Provider produced invalid plan
│
│ Provider "registry.terraform.io/hashicorp/aws" has indicated "requires replacement" on
│ aws_vpc_security_group_ingress_rule.allow_tls_ipv6 for a non-existent attribute path
│ cty.Path{cty.GetAttrStep{Name:""}}.
│
│ This is a bug in the provider, which should be reported in the provider's own issue tracker.
╵
╷
│ Error: Provider produced invalid plan
│
│ Provider "registry.terraform.io/hashicorp/aws" has indicated "requires replacement" on
│ aws_vpc_security_group_ingress_rule.allow_tls_ipv4 for a non-existent attribute path
│ cty.Path{cty.GetAttrStep{Name:""}}.
│
│ This is a bug in the provider, which should be reported in the provider's own issue tracker.
╵
PS D:\downloads\PROJECTS\terraform> terraform state rm aws_security_group.allow_tls
Removed aws_security_group.allow_tls
Successfully removed 1 resource instance(s).
PS D:\downloads\PROJECTS\terraform> terraform state rm aws_vpc_security_group_ingress_rule.allow_tls_ipv4
Removed aws_vpc_security_group_ingress_rule.allow_tls_ipv4
Successfully removed 1 resource instance(s).
PS D:\downloads\PROJECTS\terraform> terraform state rm aws_vpc_security_group_ingress_rule.allow_tls_ipv6
Removed aws_vpc_security_group_ingress_rule.allow_tls_ipv6
Successfully removed 1 resource instance(s).
PS D:\downloads\PROJECTS\terraform> terraform state rm aws_vpc_security_group_ingress_rule.allow_ssh_ipv4
Removed aws_vpc_security_group_ingress_rule.allow_ssh_ipv4
Successfully removed 1 resource instance(s).
PS D:\downloads\PROJECTS\terraform> terraform state rm aws_vpc_security_group_egress_rule.allow_all_traffic_ipv4
Removed aws_vpc_security_group_egress_rule.allow_all_traffic_ipv4
Successfully removed 1 resource instance(s).
PS D:\downloads\PROJECTS\terraform> terraform state rm aws_vpc_security_group_egress_rule.allow_all_traffic_ipv6
Removed aws_vpc_security_group_egress_rule.allow_all_traffic_ipv6
Successfully removed 1 resource instance(s).
PS D:\downloads\PROJECTS\terraform> terraform plan
data.aws_vpc.default: Reading...
data.aws_ami.ubuntu: Reading...
data.aws_ami.ubuntu: Read complete after 2s [id=ami-03b371d239dfe4af4]
data.aws_vpc.default: Read complete after 3s [id=vpc-008de4b465fe3117a]
aws_instance.Sample_demo[0]: Refreshing state... [id=i-0049f30da5dd87eeb]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.Sample_demo[0] will be created
  + resource "aws_instance" "Sample_demo" {
      + ami                                  = "ami-03b371d239dfe4af4"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "abc"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + region                               = "eu-north-1"
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "EC2_Without_AMI"
        }
      + tags_all                             = {
          + "Name" = "EC2_Without_AMI"
        }
      + tenancy                              = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # aws_security_group.allow_tls will be created
  + resource "aws_security_group" "allow_tls" {
      + arn                    = (known after apply)
      + description            = "Allow TLS inbound traffic and all outbound traffic"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "allow_tls"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "eu-north-1"
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow_tls"
        }
      + tags_all               = {
          + "Name" = "allow_tls"
        }
      + vpc_id                 = "vpc-008de4b465fe3117a"
    }

  # aws_vpc_security_group_egress_rule.allow_all_traffic_ipv4 will be created
  + resource "aws_vpc_security_group_egress_rule" "allow_all_traffic_ipv4" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "0.0.0.0/0"
      + id                     = (known after apply)
      + ip_protocol            = "-1"
      + region                 = "eu-north-1"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
    }

  # aws_vpc_security_group_egress_rule.allow_all_traffic_ipv6 will be created
  + resource "aws_vpc_security_group_egress_rule" "allow_all_traffic_ipv6" {
      + arn                    = (known after apply)
      + cidr_ipv6              = "::/0"
      + id                     = (known after apply)
      + ip_protocol            = "-1"
      + region                 = "eu-north-1"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
    }

  # aws_vpc_security_group_ingress_rule.allow_ssh_ipv4 will be created
  + resource "aws_vpc_security_group_ingress_rule" "allow_ssh_ipv4" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "0.0.0.0/0"
      + from_port              = 22
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + region                 = "eu-north-1"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = 22
    }

  # aws_vpc_security_group_ingress_rule.allow_tls_ipv4 will be created
  + resource "aws_vpc_security_group_ingress_rule" "allow_tls_ipv4" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "172.31.0.0/16"
      + from_port              = 443
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + region                 = "eu-north-1"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = 443
    }

  # aws_vpc_security_group_ingress_rule.allow_tls_ipv6 will be created
  + resource "aws_vpc_security_group_ingress_rule" "allow_tls_ipv6" {
      + arn                    = (known after apply)
      + cidr_ipv6              = "::/0"
      + from_port              = 443
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + region                 = "eu-north-1"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = 443
    }

Plan: 7 to add, 0 to change, 0 to destroy.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
PS D:\downloads\PROJECTS\terraform> terraform apply
data.aws_vpc.default: Reading...
data.aws_ami.ubuntu: Reading...
data.aws_ami.ubuntu: Read complete after 2s [id=ami-03b371d239dfe4af4]
data.aws_vpc.default: Read complete after 3s [id=vpc-008de4b465fe3117a]
aws_instance.Sample_demo[0]: Refreshing state... [id=i-0049f30da5dd87eeb]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.Sample_demo[0] will be created
  + resource "aws_instance" "Sample_demo" {
      + ami                                  = "ami-03b371d239dfe4af4"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "abc"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + region                               = "eu-north-1"
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "EC2_Without_AMI"
        }
      + tags_all                             = {
          + "Name" = "EC2_Without_AMI"
        }
      + tenancy                              = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # aws_security_group.allow_tls will be created
  + resource "aws_security_group" "allow_tls" {
      + arn                    = (known after apply)
      + description            = "Allow TLS inbound traffic and all outbound traffic"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "allow_tls"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "eu-north-1"
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow_tls"
        }
      + tags_all               = {
          + "Name" = "allow_tls"
        }
      + vpc_id                 = "vpc-008de4b465fe3117a"
    }

  # aws_vpc_security_group_egress_rule.allow_all_traffic_ipv4 will be created
  + resource "aws_vpc_security_group_egress_rule" "allow_all_traffic_ipv4" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "0.0.0.0/0"
      + id                     = (known after apply)
      + ip_protocol            = "-1"
      + region                 = "eu-north-1"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
    }

  # aws_vpc_security_group_egress_rule.allow_all_traffic_ipv6 will be created
  + resource "aws_vpc_security_group_egress_rule" "allow_all_traffic_ipv6" {
      + arn                    = (known after apply)
      + cidr_ipv6              = "::/0"
      + id                     = (known after apply)
      + ip_protocol            = "-1"
      + region                 = "eu-north-1"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
    }

  # aws_vpc_security_group_ingress_rule.allow_ssh_ipv4 will be created
  + resource "aws_vpc_security_group_ingress_rule" "allow_ssh_ipv4" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "0.0.0.0/0"
      + from_port              = 22
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + region                 = "eu-north-1"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = 22
    }

  # aws_vpc_security_group_ingress_rule.allow_tls_ipv4 will be created
  + resource "aws_vpc_security_group_ingress_rule" "allow_tls_ipv4" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "172.31.0.0/16"
      + from_port              = 443
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + region                 = "eu-north-1"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = 443
    }

  # aws_vpc_security_group_ingress_rule.allow_tls_ipv6 will be created
  + resource "aws_vpc_security_group_ingress_rule" "allow_tls_ipv6" {
      + arn                    = (known after apply)
      + cidr_ipv6              = "::/0"
      + from_port              = 443
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + region                 = "eu-north-1"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = 443
    }

Plan: 7 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_security_group.allow_tls: Creating...
aws_security_group.allow_tls: Creation complete after 4s [id=sg-0705f8d6a756b4022]
aws_instance.Sample_demo[0]: Creating...
aws_vpc_security_group_egress_rule.allow_all_traffic_ipv4: Creating...
aws_vpc_security_group_egress_rule.allow_all_traffic_ipv6: Creating...
aws_vpc_security_group_ingress_rule.allow_tls_ipv6: Creating...
aws_vpc_security_group_ingress_rule.allow_tls_ipv4: Creating...
aws_vpc_security_group_ingress_rule.allow_ssh_ipv4: Creating...
aws_vpc_security_group_egress_rule.allow_all_traffic_ipv6: Creation complete after 1s [id=sgr-0c77cc3a5831285cb]
aws_vpc_security_group_ingress_rule.allow_ssh_ipv4: Creation complete after 1s [id=sgr-049760cdd2267c533]
aws_vpc_security_group_egress_rule.allow_all_traffic_ipv4: Creation complete after 1s [id=sgr-0c1999f0d61b86a76]
aws_vpc_security_group_ingress_rule.allow_tls_ipv6: Creation complete after 1s [id=sgr-0da5e2ad0239e5249]
aws_vpc_security_group_ingress_rule.allow_tls_ipv4: Creation complete after 1s [id=sgr-08adc9fb5e549c791]
aws_instance.Sample_demo[0]: Still creating... [00m10s elapsed]
aws_instance.Sample_demo[0]: Still creating... [00m20s elapsed]
aws_instance.Sample_demo[0]: Still creating... [00m30s elapsed]
aws_instance.Sample_demo[0]: Still creating... [00m40s elapsed]
aws_instance.Sample_demo[0]: Still creating... [00m50s elapsed]
aws_instance.Sample_demo[0]: Creation complete after 56s [id=i-0522d51c73d92fa5f]

Apply complete! Resources: 7 added, 0 changed, 0 destroyed.
PS D:\downloads\PROJECTS\terraform>
